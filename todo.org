* Memento-mori [13/23]
** DONE First-class threaded schedulers
   Make schedulers into first-class objects that can be used to manage
   scheduler threads and compartmentalize mori usage.
** DONE Error capture
   Capture any errors that happen during actor execution and terminate the
   actor, instead of crashing the event thread.
** DONE Exits and signals
   Implement local and remote signals. This'll have to use the
   interrupt-thread clusterfuck so we can actually interrupt execution
   instead of waiting until an actor is done for a signal to be processed.

   The following semantics might be acceptable: Regular exits do not
   interrupt, as they do with the old mori. Instead, they add a message to
   an exits queue. The exits queue takes precedent over the standard
   queue. A special handler processes exits and stops actors as
   appropriate. Actors will need a new 'dead' state of some sort so new
   message sends don't trigger message handling. Killing an actor should
   actually interrupt its current execution and be impossible to handle.
*** DONE Exiting from self
    Two kinds of exits can be signaled locally: exits, and errors. Both of
    these set the actor state to 'dead', which prevents any future messages
    from triggering a handle-message. Exits are not necessarily an error
    condition, and can be given an arbitrary object as a reason. Unhandled
    errors automatically trigger an exit for the actor, with the condition
    object as the reason. Local perform a non-local exit from the current
    point of execution.
*** DONE Remote exits
    There are two kinds of 'remote exits' (meaning, exits forced on an
    actor from a different actor, instead of locally triggered): exit
    signals and kill signals.

    Exit signals do not interrupt an actor if it's active, but signal
    processing for exits take precedence over regular messages. When an
    exit signal is received by an actor, the next time it is scheduled, the
    exit signal will set the actor's status to 'dead' and prevent future
    processing of the actor.

    Kill signals are special in that they take absolute precedence: They
    interrupt an executing actor and prevent all further execution. When an
    actor is killed, its status is set to 'dead' with reason
    'killed'. Unlike all other types of exits, kill signals cannot be
    handled and are not converted to messages when the actor is trapping
    exits.
**** DONE exit
**** TODO kill
     This one's trickier because it involves possibly interrupting a worker
     thread, but only if it's possibly executing an actor, and even then
     only go through with things if the interrupt actually ended up
     happening at the right time. *shudder*
** DONE Rework remote exits
   Keep a separate signal queue, which the actor always goes through before
   messages. Insert remote exits into this queue and have the actor itself
   make the determination about whether to add the signal as a remote exit
   message, or die. When the actor seems like it might have a thread,
   interrupt the actor and simply force it to check its signal queue.
** DONE trap-exits
   Update 2: This was solved by redoing the way exits work so that they work
   more like messages.

   Update 1: Yeah, this is probably wrong. EXIT shouldn't be remotely
   checking the trap-exits status of the target actor. Instead, it should
   simply set the signal and have the actor take care of it.

   This means that signals need to be put into their own queue... and
   that we'll have to cons up a queue just for them, which increases the
   size of actors significantly. :(

   Look into the semantics of trap exits. In the following situation, the
   actor will still exit:
     | Actor A              | Actor B              |
     | (disable-trap-exits) |                      |
     |                      | (exit 'diaf actor-a) |
     | (enable-trap-exits)  |                      |
     | *kaput*              |                      |
     |                      |                      |

   Is this acceptable? It would most certainly be in a pre-emptive
   world. Is it still acceptable in a world where 'diaf will definitely
   not be processed until Actor A's current execution (the one which
   called both disable-trap-exits and enable-trap-exits) is completed?
** DONE Fix remote exits
   I broke them somehow. They're not working as expected. See remote-exit-test.
** DONE Fix scheduling
   Update: This fix reduced the performance of links-test to 1/3 of what it
   was. :(

   Threads aren't waking up properly.
** DONE Dynamic variables
   Now that we only have a couple of threads with many small actors,
   dynamic variables are a little weirder to deal with. How should they be
   bound? I vote to punt for now.
** DONE Debugging
   Allow actors to invoke the debugger on error (and find a way to
   automatically restart threaded-scheduler threads when they get
   killed...)
** DONE Monitors
   CLOSED: [2012-07-28 Sat 14:38]
   Monitors are one-directional. Multiple monitors can exist for the same
   direction in an actor pair. MONITOR returns a monitor object that can be
   used to identify exit signals and remove the monitor with DEMONITOR.
*** DONE Basic functionality
    CLOSED: [2012-07-28 Sat 14:38]
    Don't worry too much about corner cases.
*** DONE Actor liveliness corner cases
    CLOSED: [2012-07-28 Sat 14:38]
    Go through and make sure there's no awkward cases where monitors will
    fail to signal.
** DONE Links
   CLOSED: [2012-07-28 Sat 14:38]
   Links are bidirectional. Only one link can exist between actor
   pairs. Actors cannot link to themselves. LINK creates a link, UNLINK
   removes it.
*** DONE basic functionality
    Including linking/unlinking/exit signaling
*** DONE guaranteed exit signaling
    CLOSED: [2012-07-28 Sat 14:38]
    If an actor is dead or dies, the linking actor MUST receive the
    appropriate exit signal.
** DONE Timer
   CLOSED: [2012-07-28 Sat 17:14]
   ...How in the world do I do this without using a priority queue?!
   This could be implemented by having a 'system' process
** DONE Actor designators
   CLOSED: [2012-07-28 Sat 18:03]
   Most things that accept 'actors' can actually accept actor designators,
   which are either pointers to actual actors, or symbols denoting named
   actors.  (send 'important-server "hi there")
** TODO Supervisors
   Implement a supervisor API

** TODO Higher-level actors
*** TODO mori-srv
    Provides a wrapper around regular message sending, an init/shutdown
    API, and the ability to do selective receives (by changing a
    selective-receive-function which will do the necessary secondary
    message queue magic). Unlike gen_server, it doesn't provide synchronous
    calls (because we're event-based), and it doesn't do anything terribly
    special about state (since standard actors have the same capabilities
    for maintaining state).
*** TODO mori-fsm
    API for easily defining and handling fsm-based actors.
*** TODO mori-cc
    API for easily defining and handling continuation-based actors.
** TODO all-actors
   It doesn't need to be safe, but it may be a nice utility to have while
   debugging. Don't care enough to add it yet, though, since actors get
   GCed if all references are gone anyway.
** TODO Test monitor/link corner cases
** TODO pinned actor scheduler
   A scheduler that spawns a dedicated thread for every actor added to
   it. These are important when actors must, for example, access FFI
   without blocking other actors.

** TODO single-threaded scheduler
   For lisps that don't support threads, or for people who don't want to
   use them.
** TODO Hook up to conserv
   Can this wrap/be wrapped by something like conserv so all network
   clients are handled as actors?
** TODO Work-stealing task queue
   The considerations for a system like this are a little special. The
   general idea of work stealing is good, but a bit more effort needs to be
   put into balancing the load across the scheduler threads. See
   https://groups.google.com/forum/?fromgroups#!topic/erlang-programming/0axWwyWq8Aw
** TODO Improve persistent dynamic bindings
   They kinda suck right now. Should they even be kept?...
** TODO Bring links-test back up to speed
   Tracking number of idle threads. We were doing 60k+/s on links-test, now
   we're down to 20k/s. :(

   Note: When I drop the thread count to 2, I get a blazing 110k/s on
   links-test.

   This is probably going to involve replacing the scheduler stuff with
   something more acceptable.
